/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDocumentation);
  }
}(this, function(expect, ApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDocumentation.InteressadoControllerApi();
  });

  describe('(package)', function() {
    describe('InteressadoControllerApi', function() {
      describe('createUsingPOST1', function() {
        it('should call createUsingPOST1 successfully', function(done) {
          // TODO: uncomment, update parameter values for createUsingPOST1 call and complete the assertions
          /*
          var interessadoDTO = new ApiDocumentation.InteressadoDTOInput();
          interessadoDTO.dtNascimento = "";
          interessadoDTO.flAtivo = "";
          interessadoDTO.nmInteressado = "";
          interessadoDTO.nuIdentificacao = "";

          instance.createUsingPOST1(interessadoDTO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.InteressadoDTOOutput);
            expect(data.dtNascimento).to.be.a(Date);
            expect(data.dtNascimento).to.be(new Date());
            expect(data.flAtivo).to.be.a('string');
            expect(data.flAtivo).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.nmInteressado).to.be.a('string');
            expect(data.nmInteressado).to.be("");
            expect(data.nuIdentificacao).to.be.a('string');
            expect(data.nuIdentificacao).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUsingDELETE1', function() {
        it('should call deleteUsingDELETE1 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUsingDELETE1 call
          /*
          var id = 789;

          instance.deleteUsingDELETE1(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findAllUsingGET1', function() {
        it('should call findAllUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for findAllUsingGET1 call and complete the assertions
          /*
          var opts = {};
          opts.nuIdentificacao = "nuIdentificacao_example";

          instance.findAllUsingGET1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(ApiDocumentation.InteressadoDTOOutput);
              expect(data.dtNascimento).to.be.a(Date);
              expect(data.dtNascimento).to.be(new Date());
              expect(data.flAtivo).to.be.a('string');
              expect(data.flAtivo).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.nmInteressado).to.be.a('string');
              expect(data.nmInteressado).to.be("");
              expect(data.nuIdentificacao).to.be.a('string');
              expect(data.nuIdentificacao).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findUsingGET1', function() {
        it('should call findUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for findUsingGET1 call and complete the assertions
          /*
          var id = 789;

          instance.findUsingGET1(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.InteressadoDTOOutput);
            expect(data.dtNascimento).to.be.a(Date);
            expect(data.dtNascimento).to.be(new Date());
            expect(data.flAtivo).to.be.a('string');
            expect(data.flAtivo).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.nmInteressado).to.be.a('string');
            expect(data.nmInteressado).to.be("");
            expect(data.nuIdentificacao).to.be.a('string');
            expect(data.nuIdentificacao).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUsingPUT1', function() {
        it('should call updateUsingPUT1 successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUsingPUT1 call
          /*
          var id = 789;
          var interessadoDTO = new ApiDocumentation.InteressadoDTOInput();
          interessadoDTO.dtNascimento = "";
          interessadoDTO.flAtivo = "";
          interessadoDTO.nmInteressado = "";
          interessadoDTO.nuIdentificacao = "";

          instance.updateUsingPUT1(id, interessadoDTO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
